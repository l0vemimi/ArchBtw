{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Installation Guide: Archlinux installation guide lines for both regular users and arch veterans. Brief installation guide with two modes: Regular: Brief somewhat detailed guidelines; should be used when you know what you\u2019re doing but still need some reminders here and there; Veteran: Very very basic no bullshit, no bloat guidelines, quiet literally just a simple list to quickly check against to make sure you\u2019ve got it all down.</p> <p>MakePkg: Guidelines for creating your own personal package repository using github pages.</p> <p>PkgList: Package list for all different categories.</p> <p>CommandLine: Guidelines for cli usage, and term shortcuts.</p>"},{"location":"cli/","title":"CommandLine","text":""},{"location":"cli/#terminal-shortcuts","title":"Terminal Shortcuts","text":""},{"location":"cli/#job-control","title":"Job Control","text":"<p>Terminate Job = CTRL+C Pause Job = CTRL+Z Insert EOF = CTRL+D Clear screen = CTRL+L</p>"},{"location":"cli/#navigation","title":"Navigation","text":"<p>Scroll Up = SHIFT+PgUp Scroll Down = SHIFT+PgDn Move cursor one character to left = CTRL+B Move cursor one character to right = CTRL+F Move cursor one word to left = ALT+B Move cursor one word to right = ALT+F Move cursor to start of line = CTRL+A Move cursor to end of line = CTRL+E Move to previous line of command = CTRL+P Move to next line of previous commands = CTRL+N Search = CTRL+S Reverse search = CTRL+R End search = CTRL+J</p>"},{"location":"cli/#text-control","title":"Text Control","text":"<p>Cut from line start to cursor = CTRL+U Cut from cursor to end of line = CTRL+K Cut current word after cursor = ALT+D Cut current word before cursor = CTRL+W Paste previous cut text = CTRL+Y Paste second latest cut text = ALT+Y Paste first argument of previous command = CTRL+ALT+Y Paste last argument of previous command = ALT+.</p>"},{"location":"cli/#completion","title":"Completion","text":"<p>Autocomplete list = TAB</p>"},{"location":"dev/","title":"Java","text":""},{"location":"dev/#archlinux-java","title":"archlinux-java","text":"<p>List the installed java environments and the one enabled:</p> <pre><code>archlinux-java status\n</code></pre> <p>Return short name of java environment set as default:</p> <pre><code>archlinux-java get\n</code></pre> <p>Force [JAVA_ENV] as default:</p> <pre><code>archlinux-java set\n</code></pre> <p>Unset current java environment:</p> <pre><code>archlinux-java unset\n</code></pre> <p>Fix broken java environment configuration:</p> <pre><code>archlinux-java fix\n</code></pre>"},{"location":"install/","title":"Install","text":"<p>This guide assumes you\u2019re already familiar with arch or linux and should be used as a refresher for reinstallation.</p> <p>There are two different guide modes: regular and veteran:</p> <p>Reg: Good brief guide on installation with reference links and a bit of explanation.</p> <p>Vet: Reminder and quick reference guide; Straight to the point and no screen bloat.</p> <p>If you\u2019re familiar with linux / arch, skip to the regular install guide.</p> <p>If you\u2019re an arch vet, skip to the vet install guide.</p> <p>Linux noobs, read below before progressing.</p>"},{"location":"install/#linux-noobs","title":"Linux Noobs","text":"<p>I really do not recommend installing on dual boot with win***s, (do this at your own risk) nor do I recommend installing arch if you\u2019re a noob to linux. No hate against noobs but it get\u2019s annoying seeing the same stupid questions getting asked daily on arch forums, r/arch and r/archlinux.</p> <p>If you want an introduction to linux, I recommend using debian or ubuntu to familiarise yourself, if you\u2019re hard set on arch try an arch distro such as manjaro, garuda or endeavor.</p> <p>If you\u2019re still determined to download vanilla arch, I applaud and wish you luck. This guide will not go through archinstall and I advise against it; archinstall is meant to be used for users who already know what they are doing and manually installing is the best way to learn about the system. You will learn about very critical commands that will need to be used when repairing your system such as chroot or pacstrap.</p> <p>For the love of god please RTFW and use it as your reference guide. The arch wiki will become your bible and it has EVERYTHING you need.</p>"},{"location":"install/#_1","title":"Install","text":""},{"location":"install/#veteran","title":"Veteran","text":"<ol> <li>partition</li> <li>mkfs</li> <li>mount</li> <li>pacstrap</li> <li>fstab</li> <li>chroot</li> <li>grub-install &amp; grub-mkconfig</li> <li>useradd &amp; usermod</li> </ol>"},{"location":"install/#regular","title":"Regular","text":""},{"location":"install/#1-preperation","title":"1. Preperation","text":""},{"location":"install/#11-connect-the-usb","title":"1.1. Connect the USB","text":"<p>Connect the USB to your computer and boot into the iso. This shouldn\u2019t need much explanation\u2026</p>"},{"location":"install/#12-verify-boot-mode","title":"1.2. Verify Boot Mode","text":"<pre><code>user@arch ~ # cat /sys/firmware/efi/fw_platform_size\n</code></pre> <p>It should return: 64 meaning 64 bit or 32 meaning 32 bit. </p> <p>If it returns: No such file or directory, you\u2019ve got a bios system.</p> <p>Remember this as this will be important when partitioning the disks.</p>"},{"location":"install/#2-connect-to-the-internet","title":"2. Connect to the Internet","text":"<p>This will go through two ways to connect: iwd and ethernet; Then when connected, ping to confirm the connection.</p>"},{"location":"install/#21-connect-with-iwctl","title":"2.1. Connect with iwctl","text":"<p>Use iwd to connect to the internet. Type in iwctl.</p> <pre><code>user@arch ~ #\n\nuser@arch ~ # iwctl\n</code></pre> <p>The prompt will change to iwd.List the station then put it in scan mode.</p> <pre><code>[iwd]#\n\n[iwd]# station list\n                        Devices in Station Mode\n\n    Name            State           Scanning\n\n    wlan0           disconnected\n\n\n[iwd]# station wlan0 scan\n</code></pre> <p>Once you\u2019ve got the station name; wlan0 in this case, list the available networks.</p> <pre><code>[iwd]# station wlan0 get-networks\n                        Available networks\n\n    Network name       Security        Signal\n\n    WIFI1              psk             ****\n    WIFI2              psk              ***\n    WIFI3              psk              ****\n</code></pre> <p>After you get your network, connect to it and type in the password.</p> <pre><code>[iwd]# station wlan0 connect WIFI1\nType the network passphrase for ARCH5G psk.\nPassphrase...\n</code></pre> <p>If you have a hidden network, connect to it:</p> <pre><code>[iwd]# station wlan0 connect-hidden [NETWORK_NAME]\n</code></pre>"},{"location":"install/#22-connect-to-the-internet-via-ethernet","title":"2.2. Connect to the Internet via Ethernet","text":"<p>Connecting via ethernet should be automatic; you shouldn\u2019t need to configure anything on arch. Find the setting in your android phone:</p> <p>Settings &gt; Connections &gt; Mobile Hotspot and Teathering &gt; USB Tethering</p> <p>NOTE: The USB cable needs to be connected for this option to be toggled. If you can\u2019t find the setting, look up ethernet connection for your specific device model.</p>"},{"location":"install/#23-confirm-internet-connection","title":"2.3. Confirm Internet Connection","text":"<p>Ping the network to make sure you\u2019re connected. You can use any address you want, e.g google\u2019s public DNS: 8.8.8.8; cloudfare\u2019s public DNS: 1.1.1.1. I usually use archlinux, so we\u2019ll use it in the example below.</p> <pre><code>user@arch ~ # ping archlinux.org\n</code></pre>"},{"location":"install/#4-partition","title":"4. Partition","text":"<p>List the disks on your system:</p> <pre><code>user@arch ~ # lsblk\nNAME        MAJ:MIN     RO      SIZE    TYPE    MOUNTPOINTS\nnvme0n1     259:0       0       1.8T    disk\n</code></pre> <p>Your disks can also be named sda; follow what is relevant. Anything that ends in rom, loop, airootfs can be ignored. See device file for more information.</p> <p>The following will be going through GPT partitions, for more information on partitioning, view: Partition Types and GNU\u2019s bios installation</p>"},{"location":"install/#41-layouts","title":"4.1. Layouts","text":"<p>EFI:</p> Partition Partition Type Recommended Size /boot EFI System 1 GiB [SWAP] Linux swap 4 GiB / Linux x86_64 root 23-32 GiB <p>BIOS:</p> Partition Partition Type Recommended Size - BIOS Boot 1 MiB [SWAP] Linux swap 4 GiB / Linux x86_64 root 23-32 GiB <p>NOTE: </p> <p>Home partition isnt required but it is usually created; especially if you\u2019ll be using your pc as a daily and:</p> <ul> <li>So you\u2019re not sharing the same userspace as root. </li> <li>Easier to distro hop or nuke your install to start over without wiping user configs.</li> </ul> <p>Boot of 1 GiB is enough for multiple kernels; if you don\u2019t plan on using more kernels on /boot, then 400 MiB should be enough. I usually just go for 1 GiB just in case</p>"},{"location":"install/#42-partition-disk","title":"4.2. Partition Disk","text":"<pre><code>user@arch ~ # fdisk /dev/sda\n</code></pre> <p>Create a new GPT partition.</p> <pre><code>Command (m for help): g\n</code></pre> <p>Create boot, swap, root and home. </p> <pre><code>Command (m for help): n\n\nPartition number (1-4, default 1): [ENTER]\n\nFirst sector (2048-3907026943, default 2048): [ENTER]\n\nLast sector, +/-sectors or +/-size{K,M,G,T,P} (2048-3907026943, default 3907026943): +1G\n</code></pre> <p>Do not type +1G for all partitions\u2026 make sure the size is relevant to the partition type. Review 4.1. Layouts.</p> <p>BIOS does not need /boot, do not create it.You\u2019ll need an extra partition called bios boot, with no file system and +1M ~ it can be in any position but needs to be on the first 2 TiB of the disk. This partition also needs to be created BEFORE grub is installed.</p> <p>Change the partition types.</p> <pre><code>Command (m for help): t\n</code></pre> <p>Quick partition type reference guide for GPT:</p> Alias Type GUID 1 EFI System C12A7328-F81F-11D2-BA4B-00A0C93EC93B 4 BIOS Boot 21686148-6449-6E6F-744E-656564454649 19 Linux Swap 0657FD6D-A4AB-43C4-84E5-0933C84B4F4F 20 Linux Filesystem 0FC63DAF-8483-4772-8E79-3D69D8477DE4 23 Linux Root x86_64 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709 42 Linux Home 933AC7E1-2EB4-4F13-B844-0E14E2AEF915 <p>When finished, write the disk and exit.</p> <pre><code>Command (m for help): w\n</code></pre>"},{"location":"install/#43-format-partition","title":"4.3. Format Partition","text":"<p>For boot partition, create the efi file system. </p> <pre><code>user@arch ~ # mkfs.fat -F 32 /dev/[EFI PARTITION]\n</code></pre> <p>Create the swap file system.</p> <pre><code>user@arch ~ # mkswap /dev/[SWAP_PARTITION]\n</code></pre> <p>Create a filesystem for root and home if you\u2019ve created one. I always use ext4, view file systems for more information on different types.</p> <pre><code>user@arch ~ # mkfs.ext4 /dev/[ROOT_PARTITION]\n\nuser@arch ~ # mkfs.ext4 /dev/[HOME_PARTITION]\n</code></pre>"},{"location":"install/#5-mount","title":"5. Mount","text":"<p>Mount the partitions you\u2019ve created.</p> <pre><code>user@arch ~ # mount /dev/[ROOT_PARTITION] /mnt\n</code></pre> <p>You\u2019ll need to run mkdir with other mount points.</p> <pre><code>user@arch ~ # mount --mkdir /dev/[BOOT_PARTITION] /mnt/boot\n\nuser@arch ~ # mount --mkdir /dev/[HOME_PARTITION] /mnt/home\n</code></pre> <p>NOTE: Do not mount BIOS boot partition.</p> <p>Turn on swap.</p> <pre><code>user@arch ~ # swapon /dev/[SWAP_PARTITION]\n</code></pre>"},{"location":"install/#6-pacstrap","title":"6. Pacstrap","text":"<p>Install the base packages, kernel and firmware. See kernel for more information on different kernel types and options.</p> <pre><code>user@arch ~ # pacstrap -K /mnt base linux linux-firmware\n</code></pre> <p>It\u2019s best to download the rest of your packages now, you could also do this when you\u2019ve chrooted.</p> <p>NOTE: Nothing except for /etc/pacman.d/mirrorlist will be carried over from the live install to the installed system.</p>"},{"location":"install/#61-things-to-consider","title":"6.1. Things to Consider","text":"<p>Boot Loader</p> <ul> <li>efibootmgr</li> <li>grub</li> <li>grub-legacy</li> </ul> <p>CPU Microdes: </p> <ul> <li>amd-ucode</li> <li>intel-ucode</li> </ul> <p>Desktop Environments:</p> <ul> <li>KDE Plasma</li> <li>gnome</li> </ul> <p>Display Manager:</p> <p>-gdm - lightdm - lxdm - SDDM</p> <p>Firmware:</p> <ul> <li>broadcom wireless</li> </ul> <p>Networking:</p> <ul> <li>dhcpcd</li> <li>iwd</li> <li>ModemManager</li> <li>NetworkManager</li> <li>wpa_supplicant</li> </ul> <p>Text Editors:</p> <ul> <li>nano</li> <li>vim</li> </ul> <p>Terminal Emulators:</p> <ul> <li>alacritty</li> <li>kitty</li> <li>konsole</li> <li>wezterm</li> </ul>"},{"location":"install/#7-change-root","title":"7. Change Root","text":""},{"location":"install/#71-pre-chroot","title":"7.1. Pre-Chroot","text":"<p>Before you chroot you must generate fstab.</p> <pre><code>user@arch ~ # genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre>"},{"location":"install/#72-chroot","title":"7.2. Chroot","text":"<p>Chroot into the system at your chosen mountpoint; it should be /mnt for a general new install if you followed this guide or archwiki.</p> <pre><code>user@arch ~ # arch-chroot /mnt\n</code></pre>"},{"location":"install/#73-post-chroot","title":"7.3. Post-Chroot","text":""},{"location":"install/#731-bootloader","title":"7.3.1. Bootloader","text":"<p>This will run through installing grub, for other bootloader options see boot loader comparison.</p> <p>EFI:</p> <pre><code>chroot@arch ~ # grub-install --target=x86_64-efi --efi-directory=boot --boot-loader-id=GRUB\n</code></pre> <p>BIOS:</p> <pre><code>grub-install --target=i386-pc /dev/sdx\n</code></pre> <p>/dev/sdx is the disk not the partition for grub to be installed e.g. /dev/sda /dev/nvme1n1 are disks; /dev/sda1 /dev/nvme1n1p1 are partitions.</p> <p>Generate grub config. The file for both EFI and BIOS will be generated in /boot/grub/grub.cfg.</p> <pre><code>chroot@arch ~ # grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre>"},{"location":"install/#732-initramfs","title":"7.3.2. Initramfs","text":"<p>Mkinitcpio was run during the pacstrap; To create a new initramfs for any reason:</p> <pre><code>chroot@arch ~ # mkinitcpio -P\n</code></pre>"},{"location":"install/#733-network","title":"7.3.3. Network","text":"<p>Create a hostname file in /etc; I use nano.</p> <pre><code>chroot@arch ~ # nano /etc/hostname\n\nyourhostname\n</code></pre>"},{"location":"install/#734-time-localisation","title":"7.3.4. Time &amp; Localisation","text":"<p>Set the time zone:</p> <pre><code>chroot@arch ~ # ln -sf /usr/share/zoneinfo/Region/City /etc/localtime\n\nchroot@arch ~ # hwclock --systohc\n</code></pre> <p>Set the locale:</p> <pre><code>chroot@arch ~ # locale-gen\n</code></pre> <p>Set the LANG in /etc/locale.conf:</p> <pre><code>chroot@arch ~ # LANG=en_US.UTF-8\n</code></pre>"},{"location":"install/#735-users-login","title":"7.3.5. Users &amp; Login","text":"<p>Create the root password, you will need this when you reboot and you will not be able to log in without it. If you skip this step, you\u2019ll need to chroot back in and add the password.</p> <pre><code>chroot@arch ~ # passwd\n</code></pre> <p>Create a user; You will need to create a user if you want to use a desktop environment; You will not be able to login with root.</p> <pre><code>chroot@arch ~ # useradd -m -s /usr/bin/bash [USERNAME]\n</code></pre> <p>-m / \u2013create-home: User home dir is created as /home/[USERNAME].</p> <p>-s / \u2013shell: Path to the login shell. Make sure you\u2019ve got the shell you want to use installed\u2026</p> <p>Add a password for the user account you\u2019ve just created.</p> <pre><code>chroot@arch ~ # [USERNAME] passwd\n</code></pre>"},{"location":"install/#8-reboot","title":"8. Reboot","text":"<p>CTRL + D to exit chroot, then type reboot.</p> <pre><code>user@arch ~ # reboot\n</code></pre>"},{"location":"makepkg/","title":"Creating a package repository","text":"<p>First and most obvious step is creating the GitHub page\u2026 This goes without saying so I\u2019ll keep it brief.</p> <ol> <li>Create repository.</li> <li>Enable GitHub pages &amp; deploy from branch.</li> </ol>"},{"location":"makepkg/#1-keys","title":"1. Keys","text":""},{"location":"makepkg/#11-gpg-key","title":"1.1. Gpg Key","text":"<p>Create a gpg key:</p> <pre><code>    gpg --full-generate-key\n</code></pre> <p>And then to check to make sure it\u2019s been created correctly:</p> <pre><code>    gpg --list-key\n</code></pre> <p>Take note of the email used and key id: Should contain 40 characters.</p> <p>Send your gpg key to a server to make sure it\u2019s working correctly.</p> <pre><code>    gpg --send-keys [GPG-KEY]\n</code></pre> <p>If successful you should then be able to recieve the key using:</p> <pre><code>    gpg --recv-keys [GPG-KEY]\n</code></pre>"},{"location":"makepkg/#12-pacman-key","title":"1.2. Pacman Key","text":"<p>Configure pacman to use the gpg key:</p> <pre><code>    sudo pacman-key --recv-keys [GPG-KEY]\n</code></pre> <p>And then locally sign the key:</p> <pre><code>    sudo pacman-key --lsign-key [GPG-KEY]\n</code></pre>"},{"location":"makepkg/#makepkg-key","title":"Makepkg Key","text":"<p>To build packages signed with this key it needs to be configured in makepkg in /etc/makepkg.conf</p> <pre><code>    #-- Packager: name/email of the person or organization building packages\n    PACKAGER=\"[NAME] &lt;EMAIL&gt;\"\n    #-- Specify a key to use for package signing\n    GPGKEY=\"[GPG-KEY]\"\n</code></pre>"},{"location":"makepkg/#2-repository-package","title":"2. Repository Package","text":"<p>Create the repository directories:</p> <pre><code>    mkdir -p repo/{x86_64,any}\n</code></pre>"},{"location":"makepkg/#21-build-packages","title":"2.1. Build Packages","text":"<p>Create a PKGBUILD file for your package; View archwiki creating packages.</p> <pre><code>    # Maintainer: Your Name &lt;your.email@example.com&gt;\n\n    pkgname=MyPkg\n    pkgver=1.0.0\n    pkgrel=1\n    pkgdesc=\"My package\"\n    arch=('any')\n    url=\"https://github.com/[USERNAME]/MyPkg\"\n    license=('GPL')\n    depends=('python' 'python-pyqt6' 'python-pyqt6-webengine' 'python-pygments')\n    source=(\"$pkgname-$pkgver.tar.gz\")\n    md5sums=('SKIP')\n\n    build() {\n    cd \"$srcdir/TxtEd-$pkgver\"\n    # Add your build commands here, e.g., make\n    }\n\n    package() {\n    cd \"$srcdir/MyPkg-$pkgver\"\n    install -Dm755 txted-qt6.py \"$pkgdir/usr/bin/mypkg\"\n    install -Dm644 txted-qt6.desktop \"$pkgdir/usr/share/applications/mypkg.desktop\"\n    install -Dm644 mypkg.png \"$pkgdir/usr/share/pixmaps/mypkg.png\"\n    }\n</code></pre> <p>In the source= part, put:</p> <pre><code>            source=(\"$pkgname-$pkgver.tar.gz\")\n</code></pre> <p>You need to do this and also create the tarball on the initial package build. If pointed at the repository server, it will give an error because theres nothing there\u2026 Later add:</p> <pre><code>    source=(\"$pkgname-$pkgver.tar.gz::https://github.com/[USERNAME]/[REPOSITORY]/raw/main/repo/x86_64/mypkg-$pkgver-1-any.pkg.tar.zst\")\n</code></pre> <p>Create the package tarball:</p> <pre><code>    tar -czvf MyPkg-1.0.0.tar.gz MyPkg\n</code></pre> <p>Then you can make the package. Build the package; this will make two tarballs, .tar.gz and pkg.tar.zst.</p> <pre><code>            makepkpg -si\n</code></pre> <p>Move the built package tarballs to the appropriate directories, e.g. /repo/x86_64/ /repo/any. The package tarball will have .pkg.tar.zst in the name.</p> <pre><code>            mv ../MyPkg/MyPkg-1.0.0-1-any.pkg.tar.zst repo/x86_64/\n</code></pre>"},{"location":"makepkg/#22-generate-database","title":"2.2. Generate Database","text":"<p>Generate the package database files and add the package: .pkg.tar.zst to the repository database: .db.tar.gz:</p> <pre><code>            repo-add repo/x86_64/PkgRepo.db.tar.gz repo/x86_64/MyPkg-1.0.0-1-any.pkg.tar.zst\n</code></pre> <p>The repository should now have the following structure:</p> <pre><code>            repo/\n            \u251c\u2500\u2500 x86_64/\n            \u2502   \u251c\u2500\u2500 MyPkg-1.0.0-1-x86_64.pkg.tar.zst\n            \u2502   \u251c\u2500\u2500 PkgRepo.db.tar.gz\n            \u2502   \u251c\u2500\u2500 PkgRepo.files.tar.gz\n            \u251c\u2500\u2500 any/\n            \u2502   \u251c\u2500\u2500 MyPkg-1.0.0-1-x86_64.pkg.tar.zst\n            \u2502   \u251c\u2500\u2500 PkgRepo.db.tar.gz\n            \u2502   \u251c\u2500\u2500 PkgRepo.files.tar.gz\n</code></pre> <p>Rename the generated databases from tarballs to .db and .files files:</p> <pre><code>            mv PkgRepo.db.tar.gz PkgRepo.db\n\n            mv PkgRepo.files.tar.gz PkgRepo.files\n</code></pre> <p>The repository should now look like below and should now be ready to be used.</p> <pre><code>            \u251c\u2500\u2500 repo/\n            \u2502       \u2514\u2500\u2500 x86_64/\n            \u2502       \u251c\u2500\u2500 PkgRepo.db\n            \u2502       \u251c\u2500\u2500 PkgRepo.files\n            \u2502       \u251c\u2500\u2500 MyPkg-1.0.0-1-any.pkg.tar.zst\n</code></pre>"},{"location":"makepkg/#3-pacman-config","title":"3. Pacman Config","text":"<p>Add your repository to pacman in /etc/pacman.conf. Add TrustAll and the repository server.</p> <pre><code>            [txted-repo]\n            SigLevel = Optional TrustAll\n            Server = https://[USERNAME].github.io/[REPOSITORY]/repo/x86_64\n</code></pre> <p>Make sure to update the pacman database:</p> <pre><code>            sudo pacman -Sy\n</code></pre>"},{"location":"pkglist/","title":"PkgList","text":"<ul> <li>Security<ul> <li>Network</li> <li>Privelage</li> <li>Audit</li> </ul> </li> </ul>"},{"location":"pkglist/#security","title":"Security","text":""},{"location":"pkglist/#network","title":"Network","text":"<p>whatip: AUR: Gtk application to get info on your  ip.</p> <p>sshguard: Brute force detector for ssh, exim, vsftpd and more; blocks by ip with iptables.</p> <p>ssh-audit: SSH config auditor.</p>"},{"location":"pkglist/#privelage","title":"Privelage","text":"<p>doas: Portable version of OpenBSD\u2019s doas command, known for being substantially smaller in size compared to sudo while pursuing the same goal of running command.</p> <p>sudo: Command to delegate the ability to run commands as root or another user while providing an audit trail.</p> <p>polkit-fakesudo: AUR: Wrapper for polkit that emulates sudo</p>"},{"location":"pkglist/#audit","title":"Audit","text":"<p>rkhunter: Checks for presence of rootkits.</p> <p>lynis: System auditing tool with tips on hardening your system.</p>"}]}